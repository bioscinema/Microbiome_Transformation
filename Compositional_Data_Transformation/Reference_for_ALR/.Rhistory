# Display the plot
ggsave(p, file = "boxplot_for_variable_has_high_significant.eps", width = 10, height = 5)
df_melted
print(p)
df_melted
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Assuming `df` and `significant_columns_results` are already available
# Extract significant columns for each reference
all_significant_cols <- list()
for (i in 1:nrow(significant_columns_results)) {
sig_cols <- as.numeric(unlist(strsplit(significant_columns_results$SignificantColumns[i], ", ")))
all_significant_cols[[i]] <- sig_cols
}
# Combine all significant columns into one vector
all_significant_cols_vector <- unlist(all_significant_cols)
# Count the frequency of each column being significant
significant_counts <- table(all_significant_cols_vector)
# Calculate the threshold for 50% significance (adjust threshold as needed)
threshold <- 0.8* nrow(significant_columns_results)
# Identify columns that are significant at least 50% of the time
frequently_significant_cols <- as.numeric(names(significant_counts[significant_counts >= threshold]))
# Find the column names from the original dataframe `df`
frequently_significant_colnames <- colnames(df)[frequently_significant_cols + 1]  # Adjust for 0-based indexing
print(frequently_significant_cols)
# Print the column names that are significant at least 50% of the time
print(frequently_significant_colnames)
df_proportional = data.frame(Group = df_count[,1],df_count[,-1]/rowSums(df_count[,-1]))
df_proportional[,1] = ifelse(df_proportional[,1] == "A", "LTS","STS")
#df_count[,1] = ifelse(df_count[,1] == "A", "LTS","STS")
# Filter the dataframe to include only the frequently significant columns and the group column
df_significant <- df_proportional %>% dplyr::select(Group, all_of(frequently_significant_colnames))
colnames(df_significant) = c("Group",paste0("Variable",frequently_significant_cols))
# Melt the dataframe for ggplot2
desired_order <- c("Variable98", "Variable196", "Variable231", "Variable244")
# Convert Variable column to a factor with the specified levels
df_melted <- df_significant %>%
pivot_longer(cols = -Group, names_to = "Variable", values_to = "Value") %>%
mutate(Variable = factor(Variable, levels = desired_order))
# Create the boxplot using ggplot2
p <- ggplot(df_melted, aes(x = Group, y = Value, fill = Group)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y", nrow = 1) +
theme_minimal() +
labs(y = "Relative Abundance") +
ylim(0, 0.45) +
theme(
plot.title = element_text(size = 10, face = "bold"),
legend.title = element_text(size = 10, face = "bold"),
legend.text = element_text(size = 9),
legend.position = "none",  # Remove legend
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.8),
axis.line.y = element_line(color = "black", size = 0.8),
axis.text = element_text(size = 9, face = "bold"),
axis.title = element_text(size = 10, face = "bold"),
strip.text = element_text(size = 10, face = "bold")
)
print(p)
# Display the plot
ggsave(p, file = "boxplot_for_variable_has_high_significant.eps", width = 10, height = 5)
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tibble)
library(tidyverse)
library(tidyverse)
library(ggplot2)
load("physeq.RData")
replace_zeros <- function(data, replace_value = 0.5) {
data[data == 0] <- replace_value
return(data)
}
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 7
}), ]
return(filtered_data)
}
# Remove outliers
remove_outliers <- function(df, group_col = "Group") {
remove_outliers_from_column <- function(x) {
non_zero_values <- x[x != 0]
log_values <- (non_zero_values)
Q1 <- quantile(log_values, 0.25, na.rm = TRUE)
Q3 <- quantile(log_values, 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
filtered_values <- non_zero_values[log_values >= lower_bound & log_values <= upper_bound]
result <- x
result[x != 0] <- ifelse(x[x != 0] %in% filtered_values, x[x != 0], NA)
return(result)
}
df_cleaned <- df %>%
group_by_at(group_col) %>%
mutate(across(where(is.numeric), ~ remove_outliers_from_column(.))) %>%
ungroup()
return(df_cleaned)
}
# ALR Transformation
alr_transformation <- function(data, group_factor = 1, ref_component) {
factors <- as.vector(unique(data[[group_factor]]))
group1 <- data[data[[group_factor]] == factors[1], -group_factor]
group2 <- data[data[[group_factor]] == factors[2], -group_factor]
ref_col_name <- colnames(group1)[ref_component]
group1_alr <- log(group1 / group1[[ref_col_name]])
group2_alr <- log(group2 / group2[[ref_col_name]])
colnames(group1_alr) <- colnames(data[, -group_factor])
colnames(group2_alr) <- colnames(data[, -group_factor])
group1_alr <- cbind(Group = factors[1], group1_alr)
group2_alr <- cbind(Group = factors[2], group2_alr)
combined <- rbind(group1_alr, group2_alr)
return(combined)
}
# Test significant for ALR Transformation
## Situation 1: replace 0 with 0.5, without remove outliers
otu_table_data <- otu_table(physeq.tree)
otu_table_transposed <- t(filter_rows(otu_table_data))
data = as.data.frame(otu_table_transposed)
filtered_df <- data %>%
filter(grepl("\\.MD", rownames(data)))
df <- filtered_df %>%
mutate(Group = case_when(
grepl("^LTS", rownames(.)) ~ "A",
grepl("^STS", rownames(.)) ~ "B"
))
df_0 <- df %>%
select(Group, everything())
df_cleaned <- (df_0)
otu_table_compositional <- df_cleaned %>%
select(-Group) %>%
as.matrix()
otu_table_compositional <- replace_zeros(otu_table_compositional) / rowSums(replace_zeros(otu_table_compositional),na.rm = TRUE)
otu_table_compositional <- as.data.frame(otu_table_compositional)
otu_table_compositional$Group <- df_cleaned$Group
otu_table_compositional <- otu_table_compositional %>%
select(Group, everything())
identify_significant_columns <- function(data, group_factor = 1) {
results <- data.frame(Reference = integer(), SignificantColumns = character(), stringsAsFactors = FALSE)
num_cols <- ncol(data) - 1
for (ref_component in 1:num_cols) {
transformed_data <- alr_transformation(data, group_factor, ref_component)
group1_data <- transformed_data %>% filter(Group == unique(transformed_data$Group)[1])
group2_data <- transformed_data %>% filter(Group == unique(transformed_data$Group)[2])
p_values <- sapply(2:ncol(transformed_data), function(col_index) {
if (col_index == ref_component + 1) {
return(NA)
} else {
t.test(group1_data[[col_index]], group2_data[[col_index]])$p.value
}
})
significant_cols <- which(p.adjust(p_values, method = "BH", n = length(p_values)) < 0.05)
results <- rbind(results, data.frame(Reference = ref_component, SignificantColumns = paste(significant_cols, collapse = ", ")))
}
return(results)
}
df <- (otu_table_compositional)
significant_columns_results <- identify_significant_columns(df, group_factor = 1)
num_cols <- ncol(df) - 1
result_matrix <- matrix("white", nrow = num_cols, ncol = num_cols)
for (i in 1:nrow(significant_columns_results)) {
ref <- significant_columns_results$Reference[i]
sig_cols <- as.numeric(unlist(strsplit(significant_columns_results$SignificantColumns[i], ", ")))
if (length(sig_cols) > 0 && !all(is.na(sig_cols))) {
result_matrix[ref, sig_cols] <- "red"
}
result_matrix[ref, ref] <- "blue"
}
result_df <- as.data.frame(result_matrix)
result_df$Reference <- 1:num_cols
plot_df <- pivot_longer(result_df, cols = -Reference, names_to = "Column", values_to = "Color")
plot_df$Column <- as.numeric(gsub("V", "", plot_df$Column))
plot_df$Color <- factor(plot_df$Color, levels = c("white", "blue", "red"))
g <- ggplot(plot_df, aes(x = Column, y = Reference, fill = Color)) +
geom_tile() +
scale_fill_manual(values = c("white" = "white", "blue" = "blue", "red" = "red"),
labels = c("Non-Significant", "Reference", "Significant")) +
theme_minimal() +
labs(
x = "Variables",
y = "Variables",
fill = "Legend") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1)+
theme(plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
axis.text=element_text(size=15,face="bold"),
axis.title=element_text(size=15,face="bold"))
plot_width <- 10
plot_height <- 8
ggsave(g, file = "Different_Reference_for_ALR_05_outlier.eps", device = "eps", width = plot_width, height = plot_height)
## Situation 2: replace 0 with 0.5, remove outliers
otu_table_data <- otu_table(physeq.tree)
otu_table_transposed <- t(filter_rows(otu_table_data))
data = as.data.frame(otu_table_transposed)
filtered_df <- data %>%
filter(grepl("\\.MD", rownames(data)))
df <- filtered_df %>%
mutate(Group = case_when(
grepl("^LTS", rownames(.)) ~ "A",
grepl("^STS", rownames(.)) ~ "B"
))
df_0 <- df %>%
select(Group, everything())
df_cleaned <- remove_outliers(df_0)
otu_table_compositional <- df_cleaned %>%
select(-Group) %>%
as.matrix()
otu_table_compositional <- replace_zeros(otu_table_compositional) / rowSums(replace_zeros(otu_table_compositional),na.rm = TRUE)
otu_table_compositional <- as.data.frame(otu_table_compositional)
otu_table_compositional$Group <- df_cleaned$Group
otu_table_compositional <- otu_table_compositional %>%
select(Group, everything())
df <- (otu_table_compositional)
significant_columns_results <- identify_significant_columns(df, group_factor = 1)
num_cols <- ncol(df) - 1
result_matrix <- matrix("white", nrow = num_cols, ncol = num_cols)
for (i in 1:nrow(significant_columns_results)) {
ref <- significant_columns_results$Reference[i]
sig_cols <- as.numeric(unlist(strsplit(significant_columns_results$SignificantColumns[i], ", ")))
if (length(sig_cols) > 0 && !all(is.na(sig_cols))) {
result_matrix[ref, sig_cols] <- "red"
}
result_matrix[ref, ref] <- "blue"
}
result_df <- as.data.frame(result_matrix)
result_df$Reference <- 1:num_cols
plot_df <- pivot_longer(result_df, cols = -Reference, names_to = "Column", values_to = "Color")
plot_df$Column <- as.numeric(gsub("V", "", plot_df$Column))
plot_df$Color <- factor(plot_df$Color, levels = c("white", "blue", "red"))
g <- ggplot(plot_df, aes(x = Column, y = Reference, fill = Color)) +
geom_tile() +
scale_fill_manual(values = c("white" = "white", "blue" = "blue", "red" = "red"),
labels = c("Non-Significant", "Reference", "Significant")) +
theme_minimal() +
labs(
x = "Variables",
y = "Variables",
fill = "Legend") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1)+
theme(plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
axis.text=element_text(size=15,face="bold"),
axis.title=element_text(size=15,face="bold"))
plot_width <- 10
plot_height <- 8
ggsave(g, file = "Different_Reference_for_ALR_05_no_outlier.eps", device = "eps", width = plot_width, height = plot_height)
## Situation 3: replace 0 with 1, without remove outliers
otu_table_data <- otu_table(physeq.tree)
otu_table_transposed <- t(filter_rows(otu_table_data))
data = as.data.frame(otu_table_transposed)
filtered_df <- data %>%
filter(grepl("\\.MD", rownames(data)))
df <- filtered_df %>%
mutate(Group = case_when(
grepl("^LTS", rownames(.)) ~ "A",
grepl("^STS", rownames(.)) ~ "B"
))
df_0 <- df %>%
select(Group, everything())
df_cleaned <- (df_0)
otu_table_compositional <- df_cleaned %>%
select(-Group) %>%
as.matrix()
otu_table_compositional <- replace_zeros(otu_table_compositional, 1) / rowSums(replace_zeros(otu_table_compositional, 1),na.rm = TRUE)
otu_table_compositional <- as.data.frame(otu_table_compositional)
otu_table_compositional$Group <- df_cleaned$Group
otu_table_compositional <- otu_table_compositional %>%
select(Group, everything())
df <- otu_table_compositional
significant_columns_results <- identify_significant_columns(df, group_factor = 1)
num_cols <- ncol(df) - 1
result_matrix <- matrix("white", nrow = num_cols, ncol = num_cols)
for (i in 1:nrow(significant_columns_results)) {
ref <- significant_columns_results$Reference[i]
sig_cols <- as.numeric(unlist(strsplit(significant_columns_results$SignificantColumns[i], ", ")))
if (length(sig_cols) > 0 && !all(is.na(sig_cols))) {
result_matrix[ref, sig_cols] <- "red"
}
result_matrix[ref, ref] <- "blue"
}
result_df <- as.data.frame(result_matrix)
result_df$Reference <- 1:num_cols
plot_df <- pivot_longer(result_df, cols = -Reference, names_to = "Column", values_to = "Color")
plot_df$Column <- as.numeric(gsub("V", "", plot_df$Column))
plot_df$Color <- factor(plot_df$Color, levels = c("white", "blue", "red"))
g <- ggplot(plot_df, aes(x = Column, y = Reference, fill = Color)) +
geom_tile() +
scale_fill_manual(values = c("white" = "white", "blue" = "blue", "red" = "red"),
labels = c("Non-Significant", "Reference", "Significant")) +
theme_minimal() +
labs(
x = "Variables",
y = "Variables",
fill = "Legend") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1)+
theme(plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
axis.text=element_text(size=15,face="bold"),
axis.title=element_text(size=15,face="bold"))
plot_width <- 10
plot_height <- 8
ggsave(g, file = "Different_Reference_for_ALR_1_outlier.eps", device = "eps", width = plot_width, height = plot_height)
## Situation 4: replace 0 with 1, remove outliers
otu_table_data <- otu_table(physeq.tree)
otu_table_transposed <- t(filter_rows(otu_table_data))
data = as.data.frame(otu_table_transposed)
filtered_df <- data %>%
filter(grepl("\\.MD", rownames(data)))
df <- filtered_df %>%
mutate(Group = case_when(
grepl("^LTS", rownames(.)) ~ "A",
grepl("^STS", rownames(.)) ~ "B"
))
df_0 <- df %>%
select(Group, everything())
df_cleaned <- remove_outliers(df_0)
otu_table_compositional <- df_cleaned %>%
select(-Group) %>%
as.matrix()
otu_table_compositional <- replace_zeros(otu_table_compositional,1) / rowSums(replace_zeros(otu_table_compositional,1),na.rm = TRUE)
otu_table_compositional <- as.data.frame(otu_table_compositional)
otu_table_compositional$Group <- df_cleaned$Group
otu_table_compositional <- otu_table_compositional %>%
select(Group, everything())
df <- otu_table_compositional
significant_columns_results <- identify_significant_columns(df, group_factor = 1)
num_cols <- ncol(df) - 1
result_matrix <- matrix("white", nrow = num_cols, ncol = num_cols)
for (i in 1:nrow(significant_columns_results)) {
ref <- significant_columns_results$Reference[i]
sig_cols <- as.numeric(unlist(strsplit(significant_columns_results$SignificantColumns[i], ", ")))
if (length(sig_cols) > 0 && !all(is.na(sig_cols))) {
result_matrix[ref, sig_cols] <- "red"
}
result_matrix[ref, ref] <- "blue"
}
result_df <- as.data.frame(result_matrix)
result_df$Reference <- 1:num_cols
plot_df <- pivot_longer(result_df, cols = -Reference, names_to = "Column", values_to = "Color")
plot_df$Column <- as.numeric(gsub("V", "", plot_df$Column))
plot_df$Color <- factor(plot_df$Color, levels = c("white", "blue", "red"))
g <- ggplot(plot_df, aes(x = Column, y = Reference, fill = Color)) +
geom_tile() +
scale_fill_manual(values = c("white" = "white", "blue" = "blue", "red" = "red"),
labels = c("Non-Significant", "Reference", "Significant")) +
theme_minimal() +
labs(
x = "Variables",
y = "Variables",
fill = "Legend") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1), aspect.ratio = 1)+
theme(plot.title = element_text(size = 15, face = "bold"),
legend.title=element_text(size=15),
legend.text=element_text(size=13))+
theme(axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color="black", size = 1),
axis.line.y = element_line(color="black", size = 1),
axis.text=element_text(size=15,face="bold"),
axis.title=element_text(size=15,face="bold"))
plot_width <- 10
plot_height <- 8
ggsave(g, file = "Different_Reference_for_ALR_1_no_outlier.eps", device = "eps", width = plot_width, height = plot_height)
dim(otu_table_transposed)
309/309
298/309
277/309
301/309
298/309
277/309
301/309
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tibble)
library(tidyverse)
load("IBD_16s_data_V3.RData")
phy1
library(phyloseq)
library(ALDEx2)
replace_zeros <- function(df, constant = 1) {
df[df == 0] <- constant
return(df)
}
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
otu_data <- data.frame(replace_zeros(filter_rows(otu_table(phy1))))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
dds <- DESeqDataSetFromMatrix(
countData = as.matrix(otu_data),
colData = sample_metadata,
design = ~ diagnosis
)
dds <- DESeq(dds)
res <- results(dds)
significant_results <- res %>%
as.data.frame() %>%
rownames_to_column("OTU") %>%
filter(padj < 0.05)
deseq2_significant <- as.vector(significant_results["OTU"])$OTU
deseq2_significant
significant_results
res
res %>%
as.data.frame()
library(phyloseq)
library(DESeq2)
library(dplyr)
library(tibble)
library(tidyverse)
load("IBD_16s_data_V3.RData")
phy1
library(phyloseq)
library(ALDEx2)
replace_zeros <- function(df, constant = 1) {
df[df == 0] <- constant
return(df)
}
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
otu_data <- data.frame(replace_zeros(filter_rows(otu_table(phy1))))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
library(phyloseq)
library(ALDEx2)
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
replace_zeros <- function(df, constant = 0.5) {
df[df == 0] <- constant
return(df)
}
otu_data <- data.frame((filter_rows(otu_table(phy1))))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
alr_transformation <- function(data, group_factor = 1, ref_component = ncol(data)-1) {
data = replace_zeros(data)
data[, -1] <- data[, -1] / rowSums(data[, -1])
factors = as.vector(unique(data[[group_factor]]))
group1 = data[data[group_factor] == factors[1],-group_factor]
group2 = data[data[group_factor] == factors[2],-group_factor]
group1_alr <- log(group1[, -ref_component] / group1[, ref_component])
group2_alr <- log(group2[, -ref_component] / group2[, ref_component])
colnames(group1_alr) <- colnames(data[,-c(group_factor,(ref_component+1))])
colnames(group2_alr) <- colnames(data[,-c(group_factor,(ref_component+1))])
group1_alr <- cbind(Group = factors[1], group1_alr)
group2_alr <- cbind(Group = factors[2], group2_alr)
combined <- rbind(group1_alr, group2_alr)
return(combined)
}
replace_zeros <- function(df, constant = 0.5) {
df[df == 0] <- constant
return(df)
}
alr_transformation <- function(data, group_factor = 1, ref_component = ncol(data)-1) {
data = replace_zeros(data)
data[, -1] <- data[, -1] / rowSums(data[, -1])
factors = as.vector(unique(data[[group_factor]]))
group1 = data[data[group_factor] == factors[1],-group_factor]
group2 = data[data[group_factor] == factors[2],-group_factor]
group1_alr <- log(group1[, -ref_component] / group1[, ref_component])
group2_alr <- log(group2[, -ref_component] / group2[, ref_component])
colnames(group1_alr) <- colnames(data[,-c(group_factor,(ref_component+1))])
colnames(group2_alr) <- colnames(data[,-c(group_factor,(ref_component+1))])
group1_alr <- cbind(Group = factors[1], group1_alr)
group2_alr <- cbind(Group = factors[2], group2_alr)
combined <- rbind(group1_alr, group2_alr)
return(combined)
}
