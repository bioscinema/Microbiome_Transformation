colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
p = 50
q = 0.3
replicate(p, 1 - rbinom(n, 1, q))
replicate(p, 1 - rbinom(n, 1, q))
n = 100
replicate(p, 1 - rbinom(n, 1, q))
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 1, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = 3, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = 1, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
plogisï¼ˆ1
plogis(1)
plogis(0.00001)
plogis(-1)
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- exp(beta0 + x * beta)
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- exp(beta0 + x * beta_zero)
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = -1, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = -5, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = -10, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 50, beta0 = 5, beta = 3, mu_logit = -2, sd_logit = 0.3, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero)
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero)
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit)
logit_transformed <- plogis(logit_values)
logit_transformed
})
X <- cbind(xz, xn)
# Adding random zeros
pi <- replicate(p, 1 - rbinom(n, 1, q))
Xc <- matrix(, n, p)
for (j in 1:p) {
Xc[, j] <- X[, j] * pi[, j]
}
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 2)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
data[,-1] = data[,-1]/rowSums(data[,-1])
hist(data[,6])
generate_data_logit_normal <- function(n = 100, p = 500, beta0 = 5, beta = 1, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero) # Convert linear predictor to probability
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit) # Generate logit-normal values
logit_transformed <- plogis(logit_values) # Apply logistic transformation
zero_inflated <- rbinom(n, 1, 1 - q) * logit_transformed # Apply zero inflation
zero_inflated
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero) # Convert linear predictor to probability
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit) # Generate logit-normal values
logit_transformed <- plogis(logit_values) # Apply logistic transformation
zero_inflated <- rbinom(n, 1, 1 - q) * logit_transformed # Apply zero inflation
zero_inflated
})
X <- cbind(xz, xn)
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 1)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
generate_data_logit_normal <- function(n = 100, p = 500, beta0 = 5, beta = 1, mu_logit = 0, sd_logit = 1, q = 0.3) {
n1 <- n / 2
n2 <- n / 2
x <- c(rep(1, n1), rep(0, n2))
# Significant columns
eta_nonzero <- beta0 + x * beta
mu_nonzero <- plogis(eta_nonzero) # Convert linear predictor to probability
xn <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit) # Generate logit-normal values
logit_transformed <- plogis(logit_values) # Apply logistic transformation
zero_inflated <- rbinom(n, 1, 1 - q) * logit_transformed # Apply zero inflation
zero_inflated
})
# Non-significant columns
beta_zero <- 0
eta_zero <- beta0 + x * beta_zero
mu_zero <- plogis(eta_zero) # Convert linear predictor to probability
xz <- replicate(p / 2, {
logit_values <- rnorm(n, mu_logit, sd_logit) # Generate logit-normal values
logit_transformed <- plogis(logit_values) # Apply logistic transformation
zero_inflated <- rbinom(n, 1, 1 - q) * logit_transformed # Apply zero inflation
zero_inflated
})
Xc <- cbind(xz, xn)
# Scaling by a random log-normal factor
s <- rlnorm(n, meanlog = 1)
Xc <- s * Xc
# Add group column and column names
group <- ifelse(x == 1, "A", "B")
colnames(Xc) <- paste0("X", 1:ncol(Xc))
Xc <- data.frame(Group = group, Xc)
return(Xc)
}
# Example usage
set.seed(123)
data <- generate_data_logit_normal()
head(data)
