Wilcoxon = wilcoxon_results,
Mann_Whitney = mann_whitney_results,
Kruskal = kruskal_results,
Kolmogorov_Smirnov = ks_results
)
# Identify the column with the highest p-value in any test
max_p_values <- apply(test_results[-1], 1, max)
most_non_significant_column <- test_results$Column[which.max(max_p_values)]
# Print the most non-significant column and its p-values
most_non_significant_results <- test_results[test_results$Column == most_non_significant_column, ]
# Result list
results <- list(
most_non_significant_column = most_non_significant_column,
most_non_significant_results = most_non_significant_results,
test_results = test_results
)
col_names <- colnames(t_otu_data)
# Identify the columns to switch
col_196 <- col_names[196]
col_last <- col_names[length(col_names)]
# Reorder the columns to switch the 196th and the last columns
col_names_switched <- col_names
col_names_switched[196] <- col_last
col_names_switched[length(col_names)] <- col_196
# Reorder the dataframe
t_otu_data <- t_otu_data[, col_names_switched]
library(DESeq2)
library(dplyr)
library(phyloseq)
library(tidyverse)
# Transformation functions
transformation_functions <- list(
"ALR" = alr_transformation,
"CLR" = clr_transformation,
"Additive Logit Ratio" = logit_alr_transformation,
"Additive Arcsine Ratio" = arcsine_alr_transformation,
"Centered Logit Ratio" = logit_clr_transformation,
"Centered Arcsine Ratio" = arcsine_clr_transformation,
"Additive (New)Power Ratio" = dual_group_boxcox_alr_transformation,
"Centered (New)Power Ratio" = dual_group_boxcox_clr_transformation,
"Boxcox in Ratio - William" = boxcox_alr_transformation_william,
"New Boxcox in Ratio" = boxcox_alr_transformation_dual_group,
"Additive New Logit Ratio" = new_logit_alr_transformation,
"Centered New Logit Ratio" = new_logit_clr_transformation,
"ILR" = ilr_transformation,
"Additive Power Ratio" = power_alr_transformation,
"Centered Power Ratio" = power_clr_transformation
)
# Function to perform Wilcoxon test and adjust p-values
# Function to perform two-sample t-test and adjust p-values
perform_t_test <- function(data) {
# Perform t-tests for each column except the first (which is assumed to be the group variable)
p_values <- sapply(data[-1], function(column) {
# Check if data is essentially constant
if (var(column[data$Group == unique(data$Group)[1]]) == 0 || var(column[data$Group == unique(data$Group)[2]]) == 0) {
return(NA) # Return NA if data is essentially constant
} else {
return(t.test(column ~ data$Group)$p.value)
}
})
# Adjust p-values using the BH method, handling NAs appropriately
adjusted_p_values <-p.adjust(p_values, method = "BH", n = sum(!is.na(p_values)))
return(adjusted_p_values)
}
# Perform the Wilcoxon test on the original data
# Initialize a list to store results for each transformation
results <- list()
# Loop through each transformation, apply it, and calculate the overlap and differences
for (transformation_name in names(transformation_functions)) {
# Apply the transformation
transformed_data <- transformation_functions[[transformation_name]](t_otu_data)
# Perform the t-test on the transformed data
t_test_results <- perform_t_test(transformed_data)
# Determine significance based on adjusted p-value < 0.05
t_test_significant <- colnames(transformed_data)[t_test_results < 0.05]
# Calculate overlap
overlap <- length(intersect(deseq2_significant, t_test_significant))
# Calculate differences
deseq2_only <- length(setdiff(deseq2_significant, t_test_significant))
t_test_only <- length(setdiff(t_test_significant, deseq2_significant))
# Store the results
results[[transformation_name]] <- list(
overlap = overlap,
deseq2_only = deseq2_only,
t_test_only = t_test_only
)
}
# Convert results to a dataframe
results_df <- do.call(rbind, lapply(names(results), function(name) {
c(Transformation = name, results[[name]])
}))
# Convert the list to a data frame
results_df <- as.data.frame(results_df, stringsAsFactors = FALSE)
# Convert numerical columns to numeric type
results_df$overlap <- as.numeric(results_df$overlap)
results_df$deseq2_only <- as.numeric(results_df$deseq2_only)
results_df$t_test_only <- as.numeric(results_df$t_test_only)
# Rename the columns for clarity
colnames(results_df) <- c("Transformation", "Overlap", "DESeq2_Only", "T_Test_Only")
results_df[,1] = unlist(results_df[,1])
# Display the results dataframe
print(results_df)
write.csv(results_df,"overlap.csv", row.names = FALSE)
library(dplyr)
library(tidyverse)
library(moments)
calculate_skewness_kurtosis_by_group <- function(data, group_col) {
data_grouped <- data %>% group_by(!!sym(group_col))
skewness_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, skewness(.x, na.rm = TRUE), NA)))
kurtosis_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, kurtosis(.x, na.rm = TRUE), NA)))
return(list(skewness = skewness_values, kurtosis = kurtosis_values))
}
# Function to calculate mean and sd
mean_sd <- function(values) {
valid_values <- values[!is.na(values)]
return(list(mean = ifelse(length(valid_values) > 0, mean(valid_values, na.rm = TRUE), NA), sd = ifelse(length(valid_values) > 0, sd(valid_values, na.rm = TRUE), NA)))
}
# Check if the Group column exists in the original data
if (!"group" %in% colnames(t_otu_data)) {
stop("The 'Group' column is not found in the data.")
}
# Calculate skewness and kurtosis for the original data
original_skewness_kurtosis <- calculate_skewness_kurtosis_by_group(t_otu_data, "group")
# Calculate mean and sd for original data
original_mean_sd <- list(
skewness = list(
GroupA = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "A") %>% select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "B") %>% select(-group))
),
kurtosis = list(
GroupA = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "A") %>% select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "B") %>% select(-group))
)
)
library(dplyr)
library(tidyverse)
library(moments)
calculate_skewness_kurtosis_by_group <- function(data, group_col) {
data_grouped <- data %>% group_by(!!sym(group_col))
skewness_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, skewness(.x, na.rm = TRUE), NA)))
kurtosis_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, kurtosis(.x, na.rm = TRUE), NA)))
return(list(skewness = skewness_values, kurtosis = kurtosis_values))
}
# Function to calculate mean and sd
mean_sd <- function(values) {
valid_values <- values[!is.na(values)]
return(list(mean = ifelse(length(valid_values) > 0, mean(valid_values, na.rm = TRUE), NA), sd = ifelse(length(valid_values) > 0, sd(valid_values, na.rm = TRUE), NA)))
}
# Check if the Group column exists in the original data
if (!"group" %in% colnames(t_otu_data)) {
stop("The 'Group' column is not found in the data.")
}
# Calculate skewness and kurtosis for the original data
original_skewness_kurtosis <- calculate_skewness_kurtosis_by_group(t_otu_data, "group")
# Calculate mean and sd for original data
original_mean_sd <- list(
skewness = list(
GroupA = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "A") %>% dplyr::select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "B") %>% dplyr::select(-group))
),
kurtosis = list(
GroupA = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "A") %>% dplyr::select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "B") %>% dplyr::select(-group))
)
)
# Check for NA values in original_mean_sd
print("Original Mean and SD for Skewness and Kurtosis:")
print(original_mean_sd)
# Loop through each transformation, apply it, and calculate skewness and kurtosis for each group
transformation_results <- list()
for (transformation_name in names(transformation_functions)) {
# Apply the transformation
transformed_data <- transformation_functions[[transformation_name]](t_otu_data)
# Check if the Group column exists in the transformed data
if (!"Group" %in% colnames(transformed_data)) {
stop(paste("The 'Group' column is not found in the transformed data for", transformation_name))
}
# Calculate skewness and kurtosis for the transformed data
transformed_skewness_kurtosis <- calculate_skewness_kurtosis_by_group(transformed_data, "Group")
# Calculate mean and sd for transformed data
transformation_results[[transformation_name]] <- list(
skewness = list(
GroupA = mean_sd(transformed_skewness_kurtosis$skewness %>% filter(Group == "A") %>% select(-Group)),
GroupB = mean_sd(transformed_skewness_kurtosis$skewness %>% filter(Group == "B") %>% select(-Group))
),
kurtosis = list(
GroupA = mean_sd(transformed_skewness_kurtosis$kurtosis %>% filter(Group == "A") %>% select(-Group)),
GroupB = mean_sd(transformed_skewness_kurtosis$kurtosis %>% filter(Group == "B") %>% select(-Group))
)
)
}
library(dplyr)
library(tidyverse)
library(moments)
calculate_skewness_kurtosis_by_group <- function(data, group_col) {
data_grouped <- data %>% group_by(!!sym(group_col))
skewness_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, skewness(.x, na.rm = TRUE), NA)))
kurtosis_values <- data_grouped %>% summarise(across(everything(), ~ ifelse(length(unique(.)) > 1, kurtosis(.x, na.rm = TRUE), NA)))
return(list(skewness = skewness_values, kurtosis = kurtosis_values))
}
# Function to calculate mean and sd
mean_sd <- function(values) {
valid_values <- values[!is.na(values)]
return(list(mean = ifelse(length(valid_values) > 0, mean(valid_values, na.rm = TRUE), NA), sd = ifelse(length(valid_values) > 0, sd(valid_values, na.rm = TRUE), NA)))
}
# Check if the Group column exists in the original data
if (!"group" %in% colnames(t_otu_data)) {
stop("The 'Group' column is not found in the data.")
}
# Calculate skewness and kurtosis for the original data
original_skewness_kurtosis <- calculate_skewness_kurtosis_by_group(t_otu_data, "group")
# Calculate mean and sd for original data
original_mean_sd <- list(
skewness = list(
GroupA = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "A") %>% dplyr::select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$skewness %>% filter(group == "B") %>% dplyr::select(-group))
),
kurtosis = list(
GroupA = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "A") %>% dplyr::select(-group)),
GroupB = mean_sd(original_skewness_kurtosis$kurtosis %>% filter(group == "B") %>% dplyr::select(-group))
)
)
# Check for NA values in original_mean_sd
print("Original Mean and SD for Skewness and Kurtosis:")
print(original_mean_sd)
# Loop through each transformation, apply it, and calculate skewness and kurtosis for each group
transformation_results <- list()
for (transformation_name in names(transformation_functions)) {
# Apply the transformation
transformed_data <- transformation_functions[[transformation_name]](t_otu_data)
# Check if the Group column exists in the transformed data
if (!"Group" %in% colnames(transformed_data)) {
stop(paste("The 'Group' column is not found in the transformed data for", transformation_name))
}
# Calculate skewness and kurtosis for the transformed data
transformed_skewness_kurtosis <- calculate_skewness_kurtosis_by_group(transformed_data, "Group")
# Calculate mean and sd for transformed data
transformation_results[[transformation_name]] <- list(
skewness = list(
GroupA = mean_sd(transformed_skewness_kurtosis$skewness %>% filter(Group == "A") %>% dplyr::select(-Group)),
GroupB = mean_sd(transformed_skewness_kurtosis$skewness %>% filter(Group == "B") %>% dplyr::select(-Group))
),
kurtosis = list(
GroupA = mean_sd(transformed_skewness_kurtosis$kurtosis %>% filter(Group == "A") %>% dplyr::select(-Group)),
GroupB = mean_sd(transformed_skewness_kurtosis$kurtosis %>% filter(Group == "B") %>% dplyr::select(-Group))
)
)
}
# Check for NA values in transformation_results
print("Transformation Results for Skewness and Kurtosis:")
print(transformation_results)
# Combine results into a data frame for easy comparison
results_df <- data.frame(
Transformation = rep(c("Original", names(transformation_functions)), each = 2),
Group = rep(c("A", "B"), times = length(names(transformation_functions)) + 1),
Mean_Skewness = c(
original_mean_sd$skewness$GroupA$mean,
sapply(transformation_results, function(x) x$skewness$GroupA$mean),
original_mean_sd$skewness$GroupB$mean,
sapply(transformation_results, function(x) x$skewness$GroupB$mean)
),
SD_Skewness = c(
original_mean_sd$skewness$GroupA$sd,
sapply(transformation_results, function(x) x$skewness$GroupA$sd),
original_mean_sd$skewness$GroupB$sd,
sapply(transformation_results, function(x) x$skewness$GroupB$sd)
),
Mean_Kurtosis = c(
original_mean_sd$kurtosis$GroupA$mean,
sapply(transformation_results, function(x) x$kurtosis$GroupA$mean),
original_mean_sd$kurtosis$GroupB$mean,
sapply(transformation_results, function(x) x$kurtosis$GroupB$mean)
),
SD_Kurtosis = c(
original_mean_sd$kurtosis$GroupA$sd,
sapply(transformation_results, function(x) x$kurtosis$GroupA$sd),
original_mean_sd$kurtosis$GroupB$sd,
sapply(transformation_results, function(x) x$kurtosis$GroupB$sd)
)
)
print(results_df)
write.csv(results_df,"Skewness_Kurtosis.csv", row.names = FALSE)
library(phyloseq)
library(ALDEx2)
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
otu_data <- data.frame(filter_rows(otu_table(phy1)))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
otu_data
library(phyloseq)
library(ALDEx2)
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
replace_zeros <- function(df, constant = 1) {
df[df == 0] <- constant
return(df)
}
otu_data <- data.frame(replace_zeros(otu_table(phy1)))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
dds <- DESeqDataSetFromMatrix(
countData = as.matrix(otu_data),
colData = sample_metadata,
design = ~ diagnosis
)
dds <- estimateSizeFactors(dds, type = "poscounts")
dds <- DESeq(dds)
res <- results(dds)
significant_results <- res %>%
as.data.frame() %>%
rownames_to_column("OTU") %>%
filter(padj < 0.05)
deseq2_significant <- as.vector(significant_results["OTU"])$OTU
deseq2_significant
library(phyloseq)
library(ALDEx2)
filter_rows <- function(data) {
filtered_data <- data[apply(data, 1, function(row) {
sum(row != 0) >= 20
}), ]
return(filtered_data)
}
replace_zeros <- function(df, constant = 1) {
df[df == 0] <- constant
return(df)
}
otu_data <- data.frame(replace_zeros(filter_rows(otu_table(phy1))))
sample_metadata <- sample_data(phy1)
sample_metadata[["diagnosis"]] = ifelse(sample_metadata[["diagnosis"]] == "healthy_control", "A", "B")
rownames(sample_metadata) = paste0("X", rownames(sample_metadata))
dds <- DESeqDataSetFromMatrix(
countData = as.matrix(otu_data),
colData = sample_metadata,
design = ~ diagnosis
)
#dds <- estimateSizeFactors(dds, type = "poscounts")
dds <- DESeq(dds)
res <- results(dds)
significant_results <- res %>%
as.data.frame() %>%
rownames_to_column("OTU") %>%
filter(padj < 0.05)
deseq2_significant <- as.vector(significant_results["OTU"])$OTU
deseq2_significant
library(DESeq2)
library(dplyr)
library(phyloseq)
library(tidyverse)
# Transformation functions
transformation_functions <- list(
"ALR" = alr_transformation,
"CLR" = clr_transformation,
"Additive Logit Ratio" = logit_alr_transformation,
"Additive Arcsine Ratio" = arcsine_alr_transformation,
"Centered Logit Ratio" = logit_clr_transformation,
"Centered Arcsine Ratio" = arcsine_clr_transformation,
"Additive (New)Power Ratio" = dual_group_boxcox_alr_transformation,
"Centered (New)Power Ratio" = dual_group_boxcox_clr_transformation,
"Boxcox in Ratio - William" = boxcox_alr_transformation_william,
"New Boxcox in Ratio" = boxcox_alr_transformation_dual_group,
"Additive New Logit Ratio" = new_logit_alr_transformation,
"Centered New Logit Ratio" = new_logit_clr_transformation,
"ILR" = ilr_transformation,
"Additive Power Ratio" = power_alr_transformation,
"Centered Power Ratio" = power_clr_transformation
)
# Function to perform Wilcoxon test and adjust p-values
# Function to perform two-sample t-test and adjust p-values
perform_t_test <- function(data) {
# Perform t-tests for each column except the first (which is assumed to be the group variable)
p_values <- sapply(data[-1], function(column) {
# Check if data is essentially constant
if (var(column[data$Group == unique(data$Group)[1]]) == 0 || var(column[data$Group == unique(data$Group)[2]]) == 0) {
return(NA) # Return NA if data is essentially constant
} else {
return(t.test(column ~ data$Group)$p.value)
}
})
# Adjust p-values using the BH method, handling NAs appropriately
adjusted_p_values <-p.adjust(p_values, method = "BH", n = sum(!is.na(p_values)))
return(adjusted_p_values)
}
# Perform the Wilcoxon test on the original data
# Initialize a list to store results for each transformation
results <- list()
# Loop through each transformation, apply it, and calculate the overlap and differences
for (transformation_name in names(transformation_functions)) {
# Apply the transformation
transformed_data <- transformation_functions[[transformation_name]](t_otu_data)
# Perform the t-test on the transformed data
t_test_results <- perform_t_test(transformed_data)
# Determine significance based on adjusted p-value < 0.05
t_test_significant <- colnames(transformed_data)[t_test_results < 0.05]
# Calculate overlap
overlap <- length(intersect(deseq2_significant, t_test_significant))
# Calculate differences
deseq2_only <- length(setdiff(deseq2_significant, t_test_significant))
t_test_only <- length(setdiff(t_test_significant, deseq2_significant))
# Store the results
results[[transformation_name]] <- list(
overlap = overlap,
deseq2_only = deseq2_only,
t_test_only = t_test_only
)
}
# Convert results to a dataframe
results_df <- do.call(rbind, lapply(names(results), function(name) {
c(Transformation = name, results[[name]])
}))
# Convert the list to a data frame
results_df <- as.data.frame(results_df, stringsAsFactors = FALSE)
# Convert numerical columns to numeric type
results_df$overlap <- as.numeric(results_df$overlap)
results_df$deseq2_only <- as.numeric(results_df$deseq2_only)
results_df$t_test_only <- as.numeric(results_df$t_test_only)
# Rename the columns for clarity
colnames(results_df) <- c("Transformation", "Overlap", "DESeq2_Only", "T_Test_Only")
results_df[,1] = unlist(results_df[,1])
# Display the results dataframe
print(results_df)
#write.csv(results_df,"overlap.csv", row.names = FALSE)
data <- read.csv("all_summarized_results_GUniFrac.csv")
setwd("~/Desktop/Microbiome_Transformation 9.26.15 AM/Compositional_Data_Transformation/GUniFrac")
data <- read.csv("all_summarized_results_GUniFrac.csv")
models <- list()
coefficients_list <- list()
# Loop through each transformation and fit the linear model
transformations <- unique(data$transformation)
for (trans in transformations) {
subset_data <- data %>%
filter(transformation == trans)
model <- lm(mean_fdr ~ diff_otu_direct + diff_otu_mode + depth_mu + depth_theta + covariate_eff_sd + confounder_eff_sd + depth_conf_factor, data = subset_data)
models[[trans]] <- model
# Extract coefficients
coefs <- summary(model)$coefficients
coefs <- as.data.frame(coefs)
coefs$variable <- rownames(coefs)
coefs <- coefs %>%
mutate(transformation = trans) %>%
select(transformation, variable, Estimate)
coefficients_list[[trans]] <- coefs
}
models <- list()
coefficients_list <- list()
# Loop through each transformation and fit the linear model
transformations <- unique(data$transformation)
for (trans in transformations) {
subset_data <- data %>%
filter(transformation == trans)
model <- lm(mean_fdr ~ diff_otu_direct + diff_otu_mode + depth_mu + depth_theta + covariate_eff_sd + confounder_eff_sd + depth_conf_factor, data = subset_data)
models[[trans]] <- model
# Extract coefficients
coefs <- summary(model)$coefficients
coefs <- as.data.frame(coefs)
coefs$variable <- rownames(coefs)
coefs <- coefs %>%
mutate(transformation = trans) %>%
tidyverse::select(transformation, variable, Estimate)
coefficients_list[[trans]] <- coefs
}
models <- list()
coefficients_list <- list()
# Loop through each transformation and fit the linear model
transformations <- unique(data$transformation)
for (trans in transformations) {
subset_data <- data %>%
filter(transformation == trans)
model <- lm(mean_fdr ~ diff_otu_direct + diff_otu_mode + depth_mu + depth_theta + covariate_eff_sd + confounder_eff_sd + depth_conf_factor, data = subset_data)
models[[trans]] <- model
# Extract coefficients
coefs <- summary(model)$coefficients
coefs <- as.data.frame(coefs)
coefs$variable <- rownames(coefs)
coefs <- coefs %>%
mutate(transformation = trans) %>%
dplyr::select(transformation, variable, Estimate)
coefficients_list[[trans]] <- coefs
}
# Save the model summaries to a text file
output_file <- "model_summaries_fdr.txt"
# Redirect output to the file
sink(output_file)
# Print the summary of each model
for (transformation in names(models)) {
cat("\nTransformation:", transformation, "\n")
print(summary(models[[transformation]]))
}
sink()
cat("Model summaries have been saved to", output_file, "\n")
# Combine all coefficients into one data frame
coefficients_df <- bind_rows(coefficients_list)
# Reshape the data frame to have one row per transformation and variable names as columns
coefficients_wide <- coefficients_df %>%
pivot_wider(names_from = variable, values_from = Estimate)
# Format all numeric values to 7 decimal places
coefficients_wide <- coefficients_wide %>%
mutate(across(where(is.numeric), ~sprintf("%.7f", .)))
# Save the table to a CSV file
output_file_csv <- "coefficients_table_fdr.csv"
write.csv(coefficients_wide, file = output_file_csv, row.names = FALSE)
cat("Coefficients table has been saved to", output_file_csv, "\n")
