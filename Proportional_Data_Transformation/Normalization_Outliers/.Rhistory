legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = y_label) +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 12, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.5),
axis.line.y = element_line(color = "black", size = 0.5),
axis.text = element_text(size = 9, face = "bold"),
axis.title = element_text(size = 15, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2, 2.2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 14),
legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 9, face = "bold"),
axis.title = element_text(size = 13, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2, 2.2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 14),
legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 9, face = "bold"),
axis.title = element_text(size = 13, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2, 2.5))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 14),
legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 16, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 9, face = "bold"),
axis.title = element_text(size = 13, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2.2, 2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 14),
legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 13, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2.2, 2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 14),
legend.title = element_text(size = 14, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 20, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 10, face = "bold"),
axis.title = element_text(size = 13, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2.2, 2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 30),
legend.title = element_text(size = 30, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 40),
legend.title = element_text(size = 40, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Estimates with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 27, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2.2, 2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 40),
legend.title = element_text(size = 40, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
create_line_plot_with_errorbars <- function(df_no_outliers, df_outliers, y_var, se_var, y_label, file_name) {
p <- ggplot() +
# No outliers
geom_line(data = df_no_outliers, aes(x = beta0, y = df_no_outliers[[y_var]]), color = "blue") +
geom_errorbar(data = df_no_outliers, aes(x = beta0, ymin = df_no_outliers[[y_var]] - df_no_outliers[[se_var]], ymax = df_no_outliers[[y_var]] + df_no_outliers[[se_var]]), width = 0.02, color = "blue") +
# Outliers
geom_line(data = df_outliers, aes(x = beta0, y = df_outliers[[y_var]]), color = "red") +
geom_errorbar(data = df_outliers, aes(x = beta0, ymin = df_outliers[[y_var]] - df_outliers[[se_var]], ymax = df_outliers[[y_var]] + df_outliers[[se_var]]), width = 0.02, color = "red") +
labs(x = expression(beta[0]), y = "Intercept") +
theme_minimal() +
ggtitle(paste(y_label, "Intercept with Standard Error")) +
theme(plot.title = element_text(hjust = 0.5, size = 27, face = "bold"),
axis.line = element_line(colour = "black"),
panel.grid.major = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.line.x = element_line(color = "black", size = 0.6),
axis.line.y = element_line(color = "black", size = 0.6),
axis.text = element_text(size = 15, face = "bold"),
axis.title = element_text(size = 20, face = "bold"),
legend.position = "none") +
scale_y_continuous(limits = c(-2.2, 2))
# Save the plot as EPS
ggsave(paste0(file_name, ".eps"), plot = p, device = "eps", width = 8, height = 6)
}
# Function to extract and save the legend
extract_and_save_legend <- function() {
p <- ggplot() +
geom_line(data = results_no_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "No Outliers")) +
geom_line(data = results_outlier, aes(x = beta0, y = estimated_intercept_orig, color = "Outliers")) +
scale_color_manual(name = "Legend", values = c("No Outliers" = "blue", "Outliers" = "red")) +
theme_minimal() +
theme(legend.position = "right", legend.text = element_text(size = 40),
legend.title = element_text(size = 40, face = "bold"))
legend <- cowplot::get_legend(p)
legend_plot <- cowplot::plot_grid(legend, ncol = 1)
# Save the legend as EPS
ggsave("legend.eps", plot = legend_plot, device = "eps", width = 6, height = 6)
}
# Creating and saving the plots
transformations <- c("estimated_intercept_orig", "estimated_intercept_log", "estimated_intercept_logit", "estimated_intercept_arcsine", "estimated_intercept_boxcox")
se_vars <- c("se_orig", "se_log", "se_logit", "se_arcsine", "se_boxcox")
labels <- c("Original", "Log", "Logit", "Arcsine", "Box-Cox")
for (i in seq_along(transformations)) {
create_line_plot_with_errorbars(results_no_outlier, results_outlier, transformations[i], se_vars[i], labels[i], labels[i])
}
# Extract and save the legend
extract_and_save_legend()
# Load necessary library
library(MASS)
# Define transformations as functions
logit <- function(x) {
log(x / (1 - x))
}
arcsine_transform <- function(x) {
(2 / pi) * asin(sqrt(x))
}
boxcox_transform <- function(x) {
boxcox_result <- boxcox(x ~ 1, plot = FALSE)
lambda <- boxcox_result$x[which.max(boxcox_result$y)]
if (lambda == 0) {
return(list(transformed = log(x), lambda = lambda))
} else {
return(list(transformed = (x^lambda - 1) / lambda, lambda = lambda))
}
}
set.seed(123)
n <- 100
num_simulations <- 100000
beta0_values <- c(0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8)
# Initialize storage for results
results_no_outlier <- data.frame(
beta0 = numeric(),
estimated_intercept_orig = numeric(),
se_orig = numeric(),
estimated_intercept_log = numeric(),
se_log = numeric(),
estimated_intercept_logit = numeric(),
se_logit = numeric(),
estimated_intercept_arcsine = numeric(),
se_arcsine = numeric(),
estimated_intercept_boxcox = numeric(),
se_boxcox = numeric()
)
lambda_values_no_outlier <- list()
# Perform simulations
for (beta0 in beta0_values) {
intercept_orig <- numeric(num_simulations)
intercept_log <- numeric(num_simulations)
intercept_logit <- numeric(num_simulations)
intercept_arcsine <- numeric(num_simulations)
intercept_boxcox <- numeric(num_simulations)
lambda_boxcox <- numeric(num_simulations)
for (i in 1:num_simulations) {
# Generate original data
epsilon <- runif(n, -0.19, 0.19)
y_orig <- beta0 + epsilon
# Fit models
fit_orig <- lm(y_orig ~ 1)
fit_log <- lm(log(y_orig) ~ 1)
fit_logit <- lm(logit(y_orig) ~ 1)
fit_arcsine <- lm(arcsine_transform(y_orig) ~ 1)
y_boxcox <- boxcox_transform(y_orig)
fit_boxcox <- lm(y_boxcox$transformed ~ 1)
# Store intercept estimates
intercept_orig[i] <- coef(fit_orig)[1]
intercept_log[i] <- coef(fit_log)[1]
intercept_logit[i] <- coef(fit_logit)[1]
intercept_arcsine[i] <- coef(fit_arcsine)[1]
intercept_boxcox[i] <- coef(fit_boxcox)[1]
lambda_boxcox[i] <- y_boxcox$lambda
}
# Compute mean and standard error of intercept estimates
mean_orig <- mean(intercept_orig)
se_orig <- sd(intercept_orig)
mean_log <- mean(intercept_log)
se_log <- sd(intercept_log)
mean_logit <- mean(intercept_logit)
se_logit <- sd(intercept_logit)
mean_arcsine <- mean(intercept_arcsine)
se_arcsine <- sd(intercept_arcsine)
mean_boxcox <- mean(intercept_boxcox)
se_boxcox <- sd(intercept_boxcox)
# Append results to data frame
results_no_outlier <- rbind(results_no_outlier, data.frame(
beta0 = beta0,
estimated_intercept_orig = mean_orig,
se_orig = se_orig,
estimated_intercept_log = mean_log,
se_log = se_log,
estimated_intercept_logit = mean_logit,
se_logit = se_logit,
estimated_intercept_arcsine = mean_arcsine,
se_arcsine = se_arcsine,
estimated_intercept_boxcox = mean_boxcox,
se_boxcox = se_boxcox
))
lambda_values_no_outlier[[as.character(beta0)]] <- lambda_boxcox
}
